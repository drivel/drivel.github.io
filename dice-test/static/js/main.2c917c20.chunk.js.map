{"version":3,"sources":["images/dice-1.svg","images/dice-2.svg","images/dice-3.svg","images/dice-4.svg","images/dice-5.svg","images/dice-6.svg","dice.js","rolls.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Dice","rollDice","newRoll","Math","ceil","random","_this","props","changeColors","react_default","a","createElement","className","src","this","diceImage","alt","color","onClick","Component","Rolls","toggleImages","getOldRolls","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","colorChanged","setState","currentRoll","oldRolls","state","concat","showImages","_this2","numbers","diceImages","dice1","dice2","dice3","dice4","dice5","dice6","listItems","map","number","key","dice","rolls","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iOCkBzBC,oNAfdC,SAAW,WACV,IAAIC,EAAUC,KAAKC,KAAqB,EAAhBD,KAAKE,UAC7BC,EAAKC,MAAMC,aAAaN,4EAIxB,OACCO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,KAAKP,MAAMQ,UAAWC,IAAKF,KAAKP,MAAMU,MAAOC,QAASJ,KAAKb,SAAUW,UAAU,8BAV1EO,cCWJC,mLATb,OACCX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAAA,MAAIO,QAASJ,KAAKP,MAAMc,aAAcT,UAAU,aAAhD,SACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaE,KAAKP,MAAMe,qBALtBH,iHCmDLI,cAxCd,SAAAA,EAAYhB,GAAO,IAAAD,EAAA,OAAAkB,OAAAC,EAAA,EAAAD,CAAAV,KAAAS,IAClBjB,EAAAkB,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAd,KAAMP,KAQPsB,aAAe,SAACZ,GACfX,EAAKwB,SAAS,CAACC,YAAad,IAC5BX,EAAKwB,SAAS,CAACE,SAAU1B,EAAK2B,MAAMD,SAASE,OAAOjB,MAXlCX,EAcnBe,aAAe,WACbf,EAAK2B,MAAME,WAAc7B,EAAKwB,SAAS,CAACK,YAAY,IAAU7B,EAAKwB,SAAS,CAACK,YAAY,KAb1F7B,EAAK2B,MAAQ,CACZF,YAAa,EACbC,SAAU,GACVG,YAAY,GALK7B,wEAkBV,IAAA8B,EAAAtB,KACAiB,EAAgBjB,KAAKmB,MAArBF,YAEFM,EAAUvB,KAAKmB,MAAMD,SACrBM,EAAa,CAACC,IAAMC,IAAMC,IAAMC,IAAMC,IAAMC,KAC5CC,EAAYR,EAAQS,IAAI,SAACC,GAAD,OAC5BX,EAAKH,MAAME,WAAc1B,EAAAC,EAAAC,cAAA,MAAIqC,IAAKD,GAAQtC,EAAAC,EAAAC,cAAA,OAAKE,IAAKyB,EAAWS,EAAO,GAAI/B,IAAI,UAAiBP,EAAAC,EAAAC,cAAA,MAAIqC,IAAKD,GAASA,KAGnH,OACCtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,UAAQO,QAASJ,KAAKO,cAAtB,iBACAZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAACsC,EAAD,CAAMzC,aAAcM,KAAKe,aAAcZ,MAAOc,EAAahB,UAAWuB,EAAWP,EAAY,KAC7FtB,EAAAC,EAAAC,cAACuC,EAAD,CAAO5B,YAAauB,EAAWxB,aAAcP,KAAKO,wBAlCrCF,aCAEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2c917c20.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dice-1.a8443601.svg\";","module.exports = __webpack_public_path__ + \"static/media/dice-2.f1880785.svg\";","module.exports = __webpack_public_path__ + \"static/media/dice-3.4232d23e.svg\";","module.exports = __webpack_public_path__ + \"static/media/dice-4.06c2c351.svg\";","module.exports = __webpack_public_path__ + \"static/media/dice-5.84ccc495.svg\";","module.exports = __webpack_public_path__ + \"static/media/dice-6.295ede1a.svg\";","import React, { Component } from 'react';\r\n\r\nclass Dice extends Component {\r\n\trollDice = () => {\r\n\t\tlet newRoll = Math.ceil(Math.random() * 6)\r\n\t\tthis.props.changeColors(newRoll)\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className=\"dice\">\r\n\t\t\t\t<h2>Dice</h2>\r\n\t\t\t\t<img src={this.props.diceImage} alt={this.props.color} onClick={this.rollDice} className=\"rollBtn clickable\" />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Dice;","import React, { Component } from 'react';\r\n\r\nclass Rolls extends Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className=\"rolls\">\r\n\t\t\t\t<h2 onClick={this.props.toggleImages} className=\"clickable\">Rolls</h2>\r\n\t\t\t\t<ul className=\"old-rolls\">{this.props.getOldRolls}</ul>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Rolls;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Dice from './dice'\nimport Rolls from './rolls'\nimport dice1 from './images/dice-1.svg';\nimport dice2 from './images/dice-2.svg';\nimport dice3 from './images/dice-3.svg';\nimport dice4 from './images/dice-4.svg';\nimport dice5 from './images/dice-5.svg';\nimport dice6 from './images/dice-6.svg';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tcurrentRoll: 6,\n\t\t\toldRolls: [],\n\t\t\tshowImages: false\n\t\t}\n\t}\n\n\tcolorChanged = (color) => {\n\t\tthis.setState({currentRoll: color})\n\t\tthis.setState({oldRolls: this.state.oldRolls.concat(color)})\n\t}\n\n\ttoggleImages = () => {\n\t\t(this.state.showImages) ? this.setState({showImages: false}) : this.setState({showImages: true})\n\t}\n\n\trender() {\n\t\tconst { currentRoll } = this.state\n\n\t\tconst numbers = this.state.oldRolls;\n\t\tconst diceImages = [dice1,dice2,dice3,dice4,dice5,dice6]\n\t\tconst listItems = numbers.map((number) =>\n\t\t\t(this.state.showImages) ? <li key={number}><img src={diceImages[number-1]} alt=\"dice\" /></li> : <li key={number}>{number}</li>\n\t\t);\n\n\t\treturn(\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>App</h1>\n\t\t\t\t<button onClick={this.toggleImages}>Toggle Images</button>\n\t\t\t\t<div className=\"wrap\">\n\t\t\t\t\t<Dice changeColors={this.colorChanged} color={currentRoll} diceImage={diceImages[currentRoll-1]} />\n\t\t\t\t\t<Rolls getOldRolls={listItems} toggleImages={this.toggleImages} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}