{"version":3,"sources":["components/Home.js","components/Games.js","layout/Header.js","layout/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","pageTitle","state","getPageTitle","react_default","a","createElement","className","Component","Games","Header","setPageTitle","document","title","siteTitle","react_router_dom","exact","to","Footer","App","page","setState","_this2","_this$state","Header_Header","react_router","path","render","Home_Home","assign","Games_Games","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAEqBA,cACpB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAOPQ,kBAAoB,WAAM,IACjBC,EAAcR,EAAKS,MAAnBD,UAERR,EAAKD,MAAMW,aAAaF,IARxBR,EAAKS,MAAQ,CACXD,UAAW,QAJKR,wEAgBlB,OACCW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,gBAlB+BC,aCAbC,cACpB,SAAAA,EAAYjB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAa,IAClBhB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAe,GAAAV,KAAAH,KAAMJ,KAOPQ,kBAAoB,WAAM,IACjBC,EAAcR,EAAKS,MAAnBD,UAERR,EAAKD,MAAMW,aAAaF,IARxBR,EAAKS,MAAQ,CACXD,UAAW,SAJKR,wEAgBlB,OACCW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,gBAlBgCC,qBCCdE,6MAEpBC,aAAe,WACd,OAAOC,SAASC,MAAQpB,EAAKD,MAAMS,UAAY,MAAQR,EAAKD,MAAMsB,mFAMlE,OAFAlB,KAAKe,eAGJP,EAAAC,EAAAC,cAAA,cACCF,EAAAC,EAAAC,cAAA,UAAKV,KAAKJ,MAAMS,WAEhBG,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAASC,OAAK,EAACC,GAAG,KAAlB,QACAb,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAASE,GAAG,UAAZ,iBAdgCT,aCDfU,mLAEnB,OACCd,EAAAC,EAAAC,cAAA,iDAHiCE,aCyCrBW,cAjCd,SAAAA,EAAY3B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuB,IAClB1B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyB,GAAApB,KAAAH,KAAMJ,KAQPW,aAAe,SAACiB,GACf3B,EAAK4B,SAAS,CAACpB,UAAWmB,KAP1B3B,EAAKS,MAAQ,CACXY,UAAW,UACXb,UAAW,IALKR,wEAaT,IAAA6B,EAAA1B,KAAA2B,EACwB3B,KAAKM,MAA9BY,EADCS,EACDT,UAAWb,EADVsB,EACUtB,UAEjB,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEjBH,EAAAC,EAAAC,cAACkB,EAAD,CAAQV,UAAWA,EAAWb,UAAWA,IAEzCG,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOT,OAAK,EAACU,KAAK,IAAIC,OAAQ,SAACnC,GAAD,OAAWY,EAAAC,EAAAC,cAACsB,EAADlC,OAAAmC,OAAA,GAAUrC,EAAV,CAAiBW,aAAcmB,EAAKnB,mBAC7EC,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,KAAK,SAASC,OAAQ,SAACnC,GAAD,OAAWY,EAAAC,EAAAC,cAACwB,EAADpC,OAAAmC,OAAA,GAAWrC,EAAX,CAAkBW,aAAcmB,EAAKnB,mBAI7EC,EAAAC,EAAAC,cAACyB,EAAD,cA3BcvB,aCGEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASV,OACRvB,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACCX,EAAAC,EAAAC,cAACgC,EAAD,OAEA1B,SAAS2B,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.32fb92be.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Home extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tthis.state = {\r\n\t\t\t pageTitle: \"Home\"\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount = () => {\r\n\t\tconst { pageTitle } = this.state\r\n\r\n\t\tthis.props.getPageTitle(pageTitle)\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"Home\">\r\n\t\t\t\thello\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Games extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tthis.state = {\r\n\t\t\t pageTitle: \"Games\"\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount = () => {\r\n\t\tconst { pageTitle } = this.state\r\n\r\n\t\tthis.props.getPageTitle(pageTitle)\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"Games\">\r\n\t\t\t\thello\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","import React, { Component } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nexport default class Header extends Component {\r\n\r\n\tsetPageTitle = () => {\r\n\t\treturn document.title = this.props.pageTitle + \" | \" + this.props.siteTitle\r\n\t}\r\n\r\n\trender() {\r\n\t\tthis.setPageTitle()\r\n\r\n\t\treturn (\r\n\t\t\t<header>\r\n\t\t\t\t<h1>{this.props.pageTitle}</h1>\r\n\r\n\t\t\t\t<NavLink exact to=\"/\">Home</NavLink>\r\n\t\t\t\t<NavLink to=\"/games\">Games</NavLink>\r\n\t\t\t</header>\r\n\t\t)\r\n\t}\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class Footer extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<footer>\r\n\t\t\t\t&copy; Michael J. Richards\r\n\t\t\t</footer>\r\n\t\t)\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { Route } from \"react-router-dom\";\nimport Home from './components/Home'\nimport Games from './components/Games'\nimport Header from './layout/Header';\nimport Footer from './layout/Footer';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.state = {\n\t\t\t siteTitle: \"My Site\",\n\t\t\t pageTitle: \"\"\n\t\t}\n\t}\n\n\tgetPageTitle = (page) => {\n\t\tthis.setState({pageTitle: page})\n\t}\n\n  render() {\n\t\tconst { siteTitle, pageTitle } = this.state\n\n    return (\n      <div className=\"App\">\n\n\t\t\t\t<Header siteTitle={siteTitle} pageTitle={pageTitle} />\n\n\t\t\t\t<Route exact path=\"/\" render={(props) => <Home {...props} getPageTitle={this.getPageTitle} />} />\n\t\t\t\t<Route path=\"/games\" render={(props) => <Games {...props} getPageTitle={this.getPageTitle} />} />\n\t\t\t\t{/* <Route exact path=\"/\" render={(props) => <Home {...props} header={<Header pageTitle={\"Home\"} siteTitle={siteTitle} />} footer={<Footer />} />} /> */}\n\t\t\t\t{/* <Route path=\"/games\" render={(props) => <Games {...props} pageTitle={\"Games\"} siteTitle={siteTitle} />}/> */}\n\n\t\t\t\t<Footer />\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n\t<BrowserRouter>\n\t\t<App />\n\t</BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}